package Monopoly;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/propiedades") // This means URL's start with /demo (after Application path)
public class PropiedadesController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
private PropiedadesRepository propiedadesRepository;
	@Autowired
private JugadoresRepository jugadoresRepository;


@GetMapping(path="/comprovarPropietario")
public @ResponseBody Jugadores ComprovarPropietario(@RequestParam int idP) {
	Optional<Propiedades> p = propiedadesRepository.findById(idP);
	return p.get().getPropietario();

}

@GetMapping(path="/comprovarPropietario")
public @ResponseBody boolean Comprar(@RequestParam int idJ, @RequestParam int idP) {
	Optional<Jugadores> oj = jugadoresRepository.findById(idJ);
	Jugadores j = oj.get();
	Optional<Propiedades> op = propiedadesRepository.findById(idP);
	Propiedades p = op.get();
	if(j.getDinero() >= p.getPrecio()){
		
	p.setPropietario(j);
	return true;
	}else{
	return false;
	}
}

@GetMapping(path="/Edificar")
public @ResponseBody int Edificar(@RequestParam int idJ, @RequestParam int idP) {
	Optional<Jugadores> oj = jugadoresRepository.findById(idJ);
	Jugadores j = oj.get();
	Optional<Propiedades> op = propiedadesRepository.findById(idP);
	Propiedades p = op.get();
	if(j.getDinero() >= p.getPrecio_casa()){
		p.setN_casas(p.getN_casas()+1);
		return p.getN_casas();
	}else{
	return p.getN_casas();
	}
}

@GetMapping(path="/Hipotecar")
public @ResponseBody boolean Hipotecar(@RequestParam int idJ, @RequestParam int idP) {
	Optional<Jugadores> oj = jugadoresRepository.findById(idJ);
	Jugadores j = oj.get();
	Optional<Propiedades> op = propiedadesRepository.findById(idP);
	Propiedades p = op.get();
	if(!p.isHipotecado()){
		p.setHipotecado(true);
		j.setDinero(j.getDinero()+p.getPrecio_hipoteca());
		return true;
	}else{
	return false;
	}
}
@GetMapping(path="/Deshipotecar")
public @ResponseBody boolean Deshipotecar(@RequestParam int idJ, @RequestParam int idP) {
	Optional<Jugadores> oj = jugadoresRepository.findById(idJ);
	Jugadores j = oj.get();
	Optional<Propiedades> op = propiedadesRepository.findById(idP);
	Propiedades p = op.get();
	if(p.isHipotecado() && j.getDinero() >= p.getPrecio_hipoteca()){
		p.setHipotecado(false);
		j.setDinero(j.getDinero()-p.getPrecio_hipoteca());
		return true;
	}else{
	return false;
	}
}
}
